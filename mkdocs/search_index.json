{
    "docs": [
        {
            "location": "/", 
            "text": "Git Dersleri\n\n\nBuras\u0131 \nBecome a Git Guru\n slogan\u0131 ile yay\u0131nlanan \nwww.atlassian.com/git/tutorials\n adresindeki Git derslerinin anlamsal \u00e7evirileri dikkate al\u0131narak haz\u0131rlanm\u0131\u015ft\u0131r.", 
            "title": "Ana Sayfa"
        }, 
        {
            "location": "/#git-dersleri", 
            "text": "Buras\u0131  Become a Git Guru  slogan\u0131 ile yay\u0131nlanan  www.atlassian.com/git/tutorials  adresindeki Git derslerinin anlamsal \u00e7evirileri dikkate al\u0131narak haz\u0131rlanm\u0131\u015ft\u0131r.", 
            "title": "Git Dersleri"
        }, 
        {
            "location": "/baslangic/depo-olusturalim/", 
            "text": "Depo (Repository) Olu\u015ftural\u0131m\n\n\n\n\nBu ders en \u00f6nemli Git komutlar\u0131ndan baz\u0131lar\u0131 hakk\u0131nda bilgiler i\u00e7ermektedir. \u0130lk \u00f6nce versiyon kontroll\u00fc bir projeye ba\u015flamak i\u00e7in yap\u0131lmas\u0131 gereken ilk i\u015f olan repository olu\u015fturma k\u0131sm\u0131ndan bahsedilecek. Daha sonraki k\u0131s\u0131mlarda ise g\u00fcnl\u00fck olarak kullan\u0131lan git komutlar\u0131 anlat\u0131lacak.\n\n\nBu dersin sonunda yeni bir git destekli bir proje olu\u015fturabilecek, mevcut projenin anl\u0131k kopyas\u0131n\u0131 alabilecek ve proje \u00fczerinde ne gibi de\u011fi\u015fiklikler yap\u0131ld\u0131\u011f\u0131n\u0131 g\u00f6rebileceksiniz.\n\n\ngit init\n\n\ngit init\n komutu ile yeni bir Git deposu olu\u015fturulur. Hen\u00fcz git versiyonlama aktif edilmemi\u015f bir proje i\u00e7in ya da hen\u00fcz ba\u015flang\u0131\u00e7 yap\u0131lmam\u0131\u015f yeni bir proje i\u00e7in bu komut ile versiyonlamay\u0131 aktif hale getirebilirsiniz. Bu komut haricindeki di\u011fer Git komutlar\u0131 genel olarak bu komuttan sonra kullan\u0131labilir olacakt\u0131r. Bu nedenle yeni bir projede ilk \u00e7al\u0131\u015ft\u0131r\u0131lacak komut da budur.\n\n\ngit init\n komutu \u00e7al\u0131\u015ft\u0131r\u0131lan dizinde \n.git\n isminde yeni bir dizin olu\u015fturur. Bu dizin i\u00e7inde git deposu i\u00e7in gerekli t\u00fcm bilgiler bulunmaktad\u0131r. Bu bilgilere genel olarak \nmetadata\n denmektedir. SVN gibi projedeki her klas\u00f6r\u00fcn i\u00e7ine revizyon bilgileri tutmak i\u00e7in klas\u00f6r ya da dosya olu\u015fturmaz. Projenin k\u00f6k dizinine sadece bir adet dizin olu\u015fturur. Bu \u015fekilde projenin i\u00e7i genel olara kirlenmemi\u015f olur. (Daha \u00f6nce SVN kullananlar ve ilk kez Git \u00f6\u011frenenler i\u00e7in bu, \u00f6nemli bir ayr\u0131nt\u0131d\u0131r.)\n\n\nKullan\u0131m\u0131\n\n\ngit init\n\n\n\n\n\u00c7al\u0131\u015ft\u0131r\u0131ld\u0131\u011f\u0131 dizini Git deposuna \u00e7evirecektir. Bu komut \u00e7al\u0131\u015ft\u0131r\u0131lan dizine \n.git\n ad\u0131nda bir klas\u00f6r olu\u015fturacakt\u0131r. Bu komut ile birlikte proje \u00fczerinde yap\u0131lacak de\u011fi\u015fiklikler kaydedilmeye haz\u0131r demektir.\n\n\ngit init \ndizin\n\n\n\n\n\nBu komut \ndizin\n ad\u0131nda bir klas\u00f6r olu\u015fturur ve klas\u00f6r\u00fcn i\u00e7ini de git deposuna \u00e7evirir.\n\n\ngit init --bare \ndizin\n\n\n\n\n\n\u00dczerinde geli\u015ftirme yap\u0131lmamak \u00fczere ve merkez depolar olu\u015fturmak i\u00e7in kullan\u0131l\u0131r. Geli\u015ftiriciler aras\u0131nda payla\u015f\u0131lan merkezi depolar \n--bare\n ile i\u015faretlenerek olu\u015fturulmal\u0131d\u0131r. Bu \u015fekilde yal\u0131n depolar olu\u015fturulurken genel olarak kullan\u0131lan dizinin sonuna \n.git\n eklenir. \u00d6rne\u011fin yal\u0131n bir deponun klas\u00f6r ismi \u015fu \u015fekilde olabilir: \nproje-dizini.git\n\n\nTart\u0131\u015fma\n\n\nSVN ile kar\u015f\u0131la\u015ft\u0131r\u0131ld\u0131\u011f\u0131nda \ngit init\n komutu ile versiyon kontroll\u00fc projeler olu\u015fturmak son derece kolayd\u0131r. Git, bir depo olu\u015fturman\u0131za, dosyalar\u0131 i\u00e7eri aktarman\u0131za ya da mevcut bir depoyu kopyalaman\u0131za gerek duymaz. Tek yapman\u0131z gereken \ncd\n komutuyla dizinin i\u00e7ine girmeniz ve \ngit init\n komutunu \u00e7al\u0131\u015ft\u0131rman\u0131z. B\u00f6ylece Git deponuz haz\u0131r hale gelecektir.\n\n\n\u00c7o\u011fu projede \ngit init\n komutu merkezi bir depo olu\u015fturulurken kullan\u0131l\u0131r ve geli\u015ftiriciler kendi bilgisayarlar\u0131nda \ngit clone\n komutunu kullan\u0131rlar. B\u00f6ylece merkezi depoda yer alan projeyi kendi bilgisayarlar\u0131na alm\u0131\u015f olur ve Git deposu kullan\u0131ma haz\u0131r olacakt\u0131r.\n\n\nBare (yal\u0131n, \u00e7\u0131plak) Depolar\u0131\n\n\n--bare\n i\u015fareti ile  Git deposu olu\u015fturulur ancak \u00e7al\u0131\u015fma dizini yer almaz. Bu gibi depolarda dosyalar\u0131 d\u00fczenlemek ya da de\u011fi\u015fiklikleri commit etmek m\u00fcmk\u00fcn de\u011fildir. Merkez Git depolar\u0131 yal\u0131n depo olarak olu\u015fturulmal\u0131d\u0131r. \u00c7\u00fcnk\u00fc yal\u0131n olmayan bir depoya dallar\u0131 g\u00f6ndermek de\u011fi\u015fiklikerin \u00fczerine yaz\u0131lmas\u0131n\u0131 sa\u011flayabilir. \u015eu \u015fekilde de d\u00fc\u015f\u00fcnebiliriz. E\u011fer bir depo \n--bare\n i\u015fareti ile olu\u015fturulduysa bu depo kodlar\u0131n sadece sakland\u0131\u011f\u0131 ve \u00fczerinde geli\u015ftirme yap\u0131lmad\u0131\u011f\u0131 bir depo olarak d\u00fc\u015f\u00fcn\u00fclebilir. B\u00f6ylece merkezi depoya yal\u0131n depo, di\u011fer geli\u015ftiricilerin depolar\u0131na  da yal\u0131n olmayan depolar debilebilir.\n\n\n\n\n\u00d6rnek\n\n\nBir projenin yerel bir kopyas\u0131n\u0131 olu\u015fturmak i\u00e7in genel olarak \ngit clone\n kullan\u0131lmakta. \ngit init\n komutu ise merkezi proje depolar\u0131 olu\u015fturmak i\u00e7in kullan\u0131l\u0131r. \u00d6rnek kodlar \u015fu \u015fekilde olabilir;\n\n\nssh \nkullanici\n@\nhost\n\ncd /proje/deposunun/yolu\ngit init --bare proje-dizini.git\n\n\n\n\n\u00d6ncelikle merkezi deponun yer alaca\u011f\u0131 sunucuya ssh ile giri\u015f yap\u0131n\u0131z. Daha sonra projenin hangi dizinde olmas\u0131n\u0131 istiyorsan\u0131z o dizini a\u00e7\u0131n. Son olarak ise \n--bare\n kullanarak merkezi depoyu olu\u015fturun. Daha sonra geli\u015ftiriciler projenin bir kopyas\u0131n\u0131 kendi bilgisayarlar\u0131na \ngit clone proje-dizini.git\n \u015feklinde alabilirler. \n\n\ngit clone\n\n\nBu komut mevcut bir git deposunu kopyalamak i\u00e7in kullan\u0131lmaktad\u0131r. Bu komut SVN'deki \nsvn checkout\n ile hemen hemen ayn\u0131 i\u015flevi g\u00f6r\u00fcr. Farkl\u0131 olarak ise kopyalanan deponun tam te\u015fekk\u00fcll\u00fc bir Git deposu olmas\u0131d\u0131r. Yani kendi ge\u00e7mi\u015f kay\u0131tlar\u0131na sahip ve kendi dosyalar\u0131 ile klas\u00f6rleri olan merkezi depodan tamamen izole edilmi\u015f haldedir.\n\n\nKullan\u0131m\u0131\n\n\ngit clone \ndepo\n\n\n\n\n\nBu komut \ndepo\n adresinde yer alan deponun bir kopyas\u0131n\u0131 al\u0131r ve \u00e7al\u0131\u015ft\u0131r\u0131ld\u0131\u011f\u0131 dizine kaydeder. Kaynak depo ki\u015finin kendi bilgisayar\u0131nda olaca\u011f\u0131 gibi HTTP ya da SSH gibi protokoller ile eri\u015filebilen bir makina \u00fczerinde de olabilir.\n\n\ngit clone \ndepo\n \ndizin\n\n\n\n\n\nBu komut ile de kaynak depo bulundu\u011fumuz dizinde, komutta belirtilen \ndizin\n ad\u0131nda bir dizin olu\u015fturulacak ve kaynak depo i\u00e7eri\u011fi bu olu\u015fturulan klas\u00f6r i\u00e7ine kopyalanacakt\u0131r.\n\n\nTart\u0131\u015fma\n\n\nBir proje merkezi git deposu olarak olu\u015fturulduysa \ngit clone\n komutu geli\u015ftirme ve de\u011fi\u015fiklik yapmak i\u00e7in projenin bir kopyas\u0131n\u0131 almak i\u00e7in kullan\u0131l\u0131r. \ngit init\n komutunda oldu\u011fu gibi klonlama i\u015flemi bir kez yap\u0131l\u0131r. Kopyalama tamamland\u0131ktan sonra t\u00fcm versiyon kontrol i\u015flemleri ve proje \u00fczerinde de\u011fi\u015fiklikler yap\u0131lmaya haz\u0131r demektir. \n\n\nDepo'dan Depo'ya Birlikte \u00c7al\u0131\u015fma (Collaboration)\n\n\nGit'in \u00e7al\u0131\u015fan kopya mant\u0131\u011f\u0131 SVN ile kar\u015f\u0131la\u015ft\u0131r\u0131ld\u0131\u011f\u0131nda \u00e7ok farkl\u0131d\u0131r. Git ile \u00e7al\u0131\u015f\u0131rken her depo kendi ba\u015f\u0131na tam te\u015fekk\u00fcll\u00fc bir depo olarak ele al\u0131nmal\u0131d\u0131r.\n\n\nBu farkl\u0131 bak\u0131\u015f a\u00e7\u0131s\u0131 Git projesinde birlikte \u00e7al\u0131\u015fma mant\u0131\u011f\u0131 ile SVN projesindeki birlikte \u00e7al\u0131\u015fma mant\u0131\u011f\u0131n\u0131n birbirinden farkl\u0131 olmas\u0131n\u0131 sa\u011flar. SVN'de bilgisayar\u0131m\u0131zdaki proje kopyas\u0131 merkezi depoya ba\u011f\u0131mlu iken Git ile bu ili\u015fki Depo'dan Depo'ya \u015feklindedir. SVN'in merkezi deposuna \u00e7al\u0131\u015fan kopyay\u0131 g\u00f6ndermek yerine Git, depodan depoya \npush\n ve \npull\n komutlar\u0131n\u0131 kullanarak veri aktar\u0131m\u0131 sa\u011flar.\n\n\n\n\n\n\nEsasen her bir Git deposuna \u00f6zel anlam da y\u00fcklenebilir. \u00d6rne\u011fin depolardan birisini merkezi depo olarak g\u00f6rmek ve di\u011ferlerini \u00e7al\u0131\u015fan kopya g\u00f6rmek gibi. B\u00f6yle bir yakla\u015f\u0131m Merkezi \u0130\u015f Ak\u0131\u015f\u0131 \u015feklinde \u00f6zetlenebilir. Bu yakla\u015f\u0131m ile versiyon kontrol sistemlerine bakt\u0131\u011f\u0131m\u0131zda bak\u0131\u015f a\u00e7\u0131m\u0131z\u0131n daha ba\u015far\u0131l\u0131 oldu\u011funu s\u00f6yleyebiliriz.\n\n\n\u00d6rnek\n\n\nA\u015fa\u011f\u0131daki \u00f6rnek \ndeneme.com\n \u00fczerinde ssh ile eri\u015filebilen merkezi bir depodan lokal kopya olu\u015fturmak i\u00e7in verilebilir;\n\n\ngit clone ssh://ahmet@deneme.com/proje/deposunun/yolu/proje-dizini.git \ncd proje-dizini\n# Proje \u00fczerinde \u00e7al\u0131\u015fmaya ba\u015fla\n\n\n\n\n\u0130lk sat\u0131rdaki komut bulundu\u011fumuz dizinde yeni bir \nproje-dizini\n olu\u015fturur ve merkez deponun i\u00e7eri\u011fini olu\u015fturulan bu dizine kopyalar. Daha sonra proje klas\u00f6r\u00fcn\u00fcn i\u00e7ine girebilir dosyalar \u00fczerinde de\u011fi\u015fikliklere ba\u015flayabilir, yap\u0131lan de\u011fi\u015fiklikleri merkezi depoya ya da di\u011fer depolara g\u00f6nderebilirsiniz. Ayr\u0131ca \n.git\n uzant\u0131s\u0131 klonlanm\u0131\u015f depo i\u00e7in g\u00f6z ard\u0131 edilecektir. B\u00f6ylece klonlanm\u0131\u015f yeni lokal depomuz yal\u0131n olmayan (non-bare) bir depo olacakt\u0131r.\n\n\ngit config\n\n\nBu komut ile bilgisayar\u0131n\u0131zdaki Git program\u0131n\u0131 ya da her bir projeyi kendi i\u00e7inde konfig\u00fcre edebilirsiniz. Bu komut ile kullan\u0131c\u0131ya ait bilgilerden tutunda bir deponun nas\u0131l davranaca\u011f\u0131na kadar her\u015feyi konfig\u00fcre etmenizi sa\u011flar. Genel olarak kullan\u0131lan konfig\u00fcrasyon se\u00e7enekleri a\u015fa\u011f\u0131da listelenmi\u015ftir.\n\n\nKullan\u0131m\u0131\n\n\ngit config user.name \nkullaniciadi\n\n\n\n\n\nBu komut ile aktif depo \u00fczerinde geli\u015ftirme yapan geli\u015ftiricinin ad\u0131 tan\u0131mlanm\u0131\u015f olur. Genel olarak \n--global\n i\u015fareti ile birlikte kullan\u0131lmaktad\u0131r.\n\n\ngit config --global user.name \nkullaniciadi\n\n\n\n\n\nBu \u015fekilde kullan\u0131ld\u0131\u011f\u0131nda sistemi kullanan kullan\u0131c\u0131n\u0131n yapaca\u011f\u0131 t\u00fcm commitlerde kullan\u0131lacak isim bilgisi kaydedilmi\u015f olacakt\u0131r.\n\n\ngit config --global user.email \nmailadresi\n\n\n\n\n\nKullan\u0131c\u0131n\u0131n yapaca\u011f\u0131 commitlerde kullan\u0131lmak \u00fczere kullan\u0131c\u0131ya ait mail adresini genel olarak ayarlak i\u00e7in kullan\u0131l\u0131r.\n\n\ngit config --global alias.\ntakma-isim\n \ngit-komutu\n\n\n\n\n\nBir Git komutu i\u00e7in takma isim olu\u015fturur. B\u00f6ylece ayn\u0131 i\u015fi yapan bir komut farkl\u0131 bir isim ile kullan\u0131labilir.\n\n\ngit config --system core.editor \nmetin-etit\u00f6r\u00fc\n\n\n\n\n\nGit komutlar\u0131 i\u00e7in kullan\u0131lacak varsay\u0131lan metin edit\u00f6r\u00fcn\u00fc ayarlamak i\u00e7in kullan\u0131l\u0131r. \u00d6r: geany\n\n\ngit config --global --edit\n\n\n\n\nBu komut ile varsay\u0131lan metin edit\u00f6r\u00fc kullan\u0131larak global konfig\u00fcrasyon dosyas\u0131 d\u00fczenlenmek \u00fczere a\u00e7\u0131l\u0131r.\n\n\nTart\u0131\u015fma\n\n\nT\u00fcm konfig\u00fcrasyon se\u00e7enekleri d\u00fcz metin dosyalar\u0131nda saklan\u0131r. Bu ayarlar\u0131 de\u011fi\u015ftirmek i\u00e7in \ngit config\n komutu, komut sat\u0131r\u0131nda kullan\u0131lmaya uygundur. Genel olarak ilk Git kurulumunda \n--global\n olarak bir \u00e7ok ayar yap\u0131lmakta ve proje geli\u015ftirme a\u015famas\u0131na ge\u00e7ilmektedir.\n\n\nGit konfig\u00fcrasyon se\u00e7eneklerini 3 farkl\u0131 dosya da saklar. Bunlar, depo, kullan\u0131c\u0131 ve sistem \u015feklindedir.\n\n\n\n\ndepo\n/.git/config\n - Depo bazl\u0131 ayarlar.\n\n\n~/.gitconfig\n Kullan\u0131c\u0131 bazl\u0131 ayarlar. \n--global\n i\u015fareti ile ayarlanan konfig\u00fcrasyon se\u00e7enekleri bu dosya da saklan\u0131r.\n\n\n$(prefix)/etc/gitconfig\n - Sistem genelinde kullan\u0131lan ayarlar.\n\n\n\n\nBu dosyalardaki ayn\u0131 ayar yer al\u0131rsa \u00f6ncelik depo, sonra kullan\u0131c\u0131 ve sonra da sistem'dir. Bu dosyalardan herhangi birini a\u00e7t\u0131\u011f\u0131n\u0131zda a\u015fa\u011f\u0131dakine benzer bir i\u00e7erik g\u00f6r\u00fcnecektir.\n\n\n[user] \n    name = Ahmet Hamdi\n    email = ahmet@deneme.com\n[alias]\n    st = status\n    co = checkout\n    br = branch\n    up = rebase\n    ci = commit\n[core]\n    editor = geany\n    excludesfile = /home/ahmethamdi/.gitignore_global \n\n\n\n\nBu bilgileri de\u011fi\u015ftirdi\u011finizde de \ngit config\n ile ayn\u0131 etki g\u00f6r\u00fclecektir.\n\n\n\u00d6rnek\n\n\nGit'i kurduktan sonra ilk i\u015f olarak ad\u0131n\u0131z\u0131 ve mail adresinizi ayarlamak ve baz\u0131 varsay\u0131lan ayarlar\u0131 de\u011fi\u015ftirmek olacakt\u0131r. Yap\u0131lan ayarlar genel olarak a\u015fa\u011f\u0131dakiler benzer \u015feyler olacakt\u0131r.\n\n\n# Git bizi nas\u0131l tan\u0131s\u0131n istersiniz\ngit config --global user.name \nAhmet Hamdi\n\ngit config --global user.email ahmet@deneme.com\n\n\n\n\n# Favori metin edit\u00f6r\u00fcn\u00fc ayarlayal\u0131m\ngit config --global core.editor geany\n\n\n\n\n# SVN benzeri baz\u0131 komut alsyaslar\u0131 olu\u015ftural\u0131m\ngit config --global alias.st status\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.up rebase\ngit config --global alias.ci commit\n\n\n\n\nBu komutlar ile yap\u0131lan de\u011fi\u015fiklikler \n~/.gitconfig\n dosyas\u0131na yans\u0131yacakt\u0131r.", 
            "title": "Depo (Repository) Olu\u015ftural\u0131m"
        }, 
        {
            "location": "/baslangic/depo-olusturalim/#depo-repository-olusturalm", 
            "text": "Bu ders en \u00f6nemli Git komutlar\u0131ndan baz\u0131lar\u0131 hakk\u0131nda bilgiler i\u00e7ermektedir. \u0130lk \u00f6nce versiyon kontroll\u00fc bir projeye ba\u015flamak i\u00e7in yap\u0131lmas\u0131 gereken ilk i\u015f olan repository olu\u015fturma k\u0131sm\u0131ndan bahsedilecek. Daha sonraki k\u0131s\u0131mlarda ise g\u00fcnl\u00fck olarak kullan\u0131lan git komutlar\u0131 anlat\u0131lacak.  Bu dersin sonunda yeni bir git destekli bir proje olu\u015fturabilecek, mevcut projenin anl\u0131k kopyas\u0131n\u0131 alabilecek ve proje \u00fczerinde ne gibi de\u011fi\u015fiklikler yap\u0131ld\u0131\u011f\u0131n\u0131 g\u00f6rebileceksiniz.", 
            "title": "Depo (Repository) Olu\u015ftural\u0131m"
        }, 
        {
            "location": "/baslangic/depo-olusturalim/#git-init", 
            "text": "git init  komutu ile yeni bir Git deposu olu\u015fturulur. Hen\u00fcz git versiyonlama aktif edilmemi\u015f bir proje i\u00e7in ya da hen\u00fcz ba\u015flang\u0131\u00e7 yap\u0131lmam\u0131\u015f yeni bir proje i\u00e7in bu komut ile versiyonlamay\u0131 aktif hale getirebilirsiniz. Bu komut haricindeki di\u011fer Git komutlar\u0131 genel olarak bu komuttan sonra kullan\u0131labilir olacakt\u0131r. Bu nedenle yeni bir projede ilk \u00e7al\u0131\u015ft\u0131r\u0131lacak komut da budur.  git init  komutu \u00e7al\u0131\u015ft\u0131r\u0131lan dizinde  .git  isminde yeni bir dizin olu\u015fturur. Bu dizin i\u00e7inde git deposu i\u00e7in gerekli t\u00fcm bilgiler bulunmaktad\u0131r. Bu bilgilere genel olarak  metadata  denmektedir. SVN gibi projedeki her klas\u00f6r\u00fcn i\u00e7ine revizyon bilgileri tutmak i\u00e7in klas\u00f6r ya da dosya olu\u015fturmaz. Projenin k\u00f6k dizinine sadece bir adet dizin olu\u015fturur. Bu \u015fekilde projenin i\u00e7i genel olara kirlenmemi\u015f olur. (Daha \u00f6nce SVN kullananlar ve ilk kez Git \u00f6\u011frenenler i\u00e7in bu, \u00f6nemli bir ayr\u0131nt\u0131d\u0131r.)  Kullan\u0131m\u0131  git init  \u00c7al\u0131\u015ft\u0131r\u0131ld\u0131\u011f\u0131 dizini Git deposuna \u00e7evirecektir. Bu komut \u00e7al\u0131\u015ft\u0131r\u0131lan dizine  .git  ad\u0131nda bir klas\u00f6r olu\u015fturacakt\u0131r. Bu komut ile birlikte proje \u00fczerinde yap\u0131lacak de\u011fi\u015fiklikler kaydedilmeye haz\u0131r demektir.  git init  dizin   Bu komut  dizin  ad\u0131nda bir klas\u00f6r olu\u015fturur ve klas\u00f6r\u00fcn i\u00e7ini de git deposuna \u00e7evirir.  git init --bare  dizin   \u00dczerinde geli\u015ftirme yap\u0131lmamak \u00fczere ve merkez depolar olu\u015fturmak i\u00e7in kullan\u0131l\u0131r. Geli\u015ftiriciler aras\u0131nda payla\u015f\u0131lan merkezi depolar  --bare  ile i\u015faretlenerek olu\u015fturulmal\u0131d\u0131r. Bu \u015fekilde yal\u0131n depolar olu\u015fturulurken genel olarak kullan\u0131lan dizinin sonuna  .git  eklenir. \u00d6rne\u011fin yal\u0131n bir deponun klas\u00f6r ismi \u015fu \u015fekilde olabilir:  proje-dizini.git  Tart\u0131\u015fma  SVN ile kar\u015f\u0131la\u015ft\u0131r\u0131ld\u0131\u011f\u0131nda  git init  komutu ile versiyon kontroll\u00fc projeler olu\u015fturmak son derece kolayd\u0131r. Git, bir depo olu\u015fturman\u0131za, dosyalar\u0131 i\u00e7eri aktarman\u0131za ya da mevcut bir depoyu kopyalaman\u0131za gerek duymaz. Tek yapman\u0131z gereken  cd  komutuyla dizinin i\u00e7ine girmeniz ve  git init  komutunu \u00e7al\u0131\u015ft\u0131rman\u0131z. B\u00f6ylece Git deponuz haz\u0131r hale gelecektir.  \u00c7o\u011fu projede  git init  komutu merkezi bir depo olu\u015fturulurken kullan\u0131l\u0131r ve geli\u015ftiriciler kendi bilgisayarlar\u0131nda  git clone  komutunu kullan\u0131rlar. B\u00f6ylece merkezi depoda yer alan projeyi kendi bilgisayarlar\u0131na alm\u0131\u015f olur ve Git deposu kullan\u0131ma haz\u0131r olacakt\u0131r.  Bare (yal\u0131n, \u00e7\u0131plak) Depolar\u0131  --bare  i\u015fareti ile  Git deposu olu\u015fturulur ancak \u00e7al\u0131\u015fma dizini yer almaz. Bu gibi depolarda dosyalar\u0131 d\u00fczenlemek ya da de\u011fi\u015fiklikleri commit etmek m\u00fcmk\u00fcn de\u011fildir. Merkez Git depolar\u0131 yal\u0131n depo olarak olu\u015fturulmal\u0131d\u0131r. \u00c7\u00fcnk\u00fc yal\u0131n olmayan bir depoya dallar\u0131 g\u00f6ndermek de\u011fi\u015fiklikerin \u00fczerine yaz\u0131lmas\u0131n\u0131 sa\u011flayabilir. \u015eu \u015fekilde de d\u00fc\u015f\u00fcnebiliriz. E\u011fer bir depo  --bare  i\u015fareti ile olu\u015fturulduysa bu depo kodlar\u0131n sadece sakland\u0131\u011f\u0131 ve \u00fczerinde geli\u015ftirme yap\u0131lmad\u0131\u011f\u0131 bir depo olarak d\u00fc\u015f\u00fcn\u00fclebilir. B\u00f6ylece merkezi depoya yal\u0131n depo, di\u011fer geli\u015ftiricilerin depolar\u0131na  da yal\u0131n olmayan depolar debilebilir.   \u00d6rnek  Bir projenin yerel bir kopyas\u0131n\u0131 olu\u015fturmak i\u00e7in genel olarak  git clone  kullan\u0131lmakta.  git init  komutu ise merkezi proje depolar\u0131 olu\u015fturmak i\u00e7in kullan\u0131l\u0131r. \u00d6rnek kodlar \u015fu \u015fekilde olabilir;  ssh  kullanici @ host \ncd /proje/deposunun/yolu\ngit init --bare proje-dizini.git  \u00d6ncelikle merkezi deponun yer alaca\u011f\u0131 sunucuya ssh ile giri\u015f yap\u0131n\u0131z. Daha sonra projenin hangi dizinde olmas\u0131n\u0131 istiyorsan\u0131z o dizini a\u00e7\u0131n. Son olarak ise  --bare  kullanarak merkezi depoyu olu\u015fturun. Daha sonra geli\u015ftiriciler projenin bir kopyas\u0131n\u0131 kendi bilgisayarlar\u0131na  git clone proje-dizini.git  \u015feklinde alabilirler.", 
            "title": "git init"
        }, 
        {
            "location": "/baslangic/depo-olusturalim/#git-clone", 
            "text": "Bu komut mevcut bir git deposunu kopyalamak i\u00e7in kullan\u0131lmaktad\u0131r. Bu komut SVN'deki  svn checkout  ile hemen hemen ayn\u0131 i\u015flevi g\u00f6r\u00fcr. Farkl\u0131 olarak ise kopyalanan deponun tam te\u015fekk\u00fcll\u00fc bir Git deposu olmas\u0131d\u0131r. Yani kendi ge\u00e7mi\u015f kay\u0131tlar\u0131na sahip ve kendi dosyalar\u0131 ile klas\u00f6rleri olan merkezi depodan tamamen izole edilmi\u015f haldedir.  Kullan\u0131m\u0131  git clone  depo   Bu komut  depo  adresinde yer alan deponun bir kopyas\u0131n\u0131 al\u0131r ve \u00e7al\u0131\u015ft\u0131r\u0131ld\u0131\u011f\u0131 dizine kaydeder. Kaynak depo ki\u015finin kendi bilgisayar\u0131nda olaca\u011f\u0131 gibi HTTP ya da SSH gibi protokoller ile eri\u015filebilen bir makina \u00fczerinde de olabilir.  git clone  depo   dizin   Bu komut ile de kaynak depo bulundu\u011fumuz dizinde, komutta belirtilen  dizin  ad\u0131nda bir dizin olu\u015fturulacak ve kaynak depo i\u00e7eri\u011fi bu olu\u015fturulan klas\u00f6r i\u00e7ine kopyalanacakt\u0131r.  Tart\u0131\u015fma  Bir proje merkezi git deposu olarak olu\u015fturulduysa  git clone  komutu geli\u015ftirme ve de\u011fi\u015fiklik yapmak i\u00e7in projenin bir kopyas\u0131n\u0131 almak i\u00e7in kullan\u0131l\u0131r.  git init  komutunda oldu\u011fu gibi klonlama i\u015flemi bir kez yap\u0131l\u0131r. Kopyalama tamamland\u0131ktan sonra t\u00fcm versiyon kontrol i\u015flemleri ve proje \u00fczerinde de\u011fi\u015fiklikler yap\u0131lmaya haz\u0131r demektir.   Depo'dan Depo'ya Birlikte \u00c7al\u0131\u015fma (Collaboration)  Git'in \u00e7al\u0131\u015fan kopya mant\u0131\u011f\u0131 SVN ile kar\u015f\u0131la\u015ft\u0131r\u0131ld\u0131\u011f\u0131nda \u00e7ok farkl\u0131d\u0131r. Git ile \u00e7al\u0131\u015f\u0131rken her depo kendi ba\u015f\u0131na tam te\u015fekk\u00fcll\u00fc bir depo olarak ele al\u0131nmal\u0131d\u0131r.  Bu farkl\u0131 bak\u0131\u015f a\u00e7\u0131s\u0131 Git projesinde birlikte \u00e7al\u0131\u015fma mant\u0131\u011f\u0131 ile SVN projesindeki birlikte \u00e7al\u0131\u015fma mant\u0131\u011f\u0131n\u0131n birbirinden farkl\u0131 olmas\u0131n\u0131 sa\u011flar. SVN'de bilgisayar\u0131m\u0131zdaki proje kopyas\u0131 merkezi depoya ba\u011f\u0131mlu iken Git ile bu ili\u015fki Depo'dan Depo'ya \u015feklindedir. SVN'in merkezi deposuna \u00e7al\u0131\u015fan kopyay\u0131 g\u00f6ndermek yerine Git, depodan depoya  push  ve  pull  komutlar\u0131n\u0131 kullanarak veri aktar\u0131m\u0131 sa\u011flar.    Esasen her bir Git deposuna \u00f6zel anlam da y\u00fcklenebilir. \u00d6rne\u011fin depolardan birisini merkezi depo olarak g\u00f6rmek ve di\u011ferlerini \u00e7al\u0131\u015fan kopya g\u00f6rmek gibi. B\u00f6yle bir yakla\u015f\u0131m Merkezi \u0130\u015f Ak\u0131\u015f\u0131 \u015feklinde \u00f6zetlenebilir. Bu yakla\u015f\u0131m ile versiyon kontrol sistemlerine bakt\u0131\u011f\u0131m\u0131zda bak\u0131\u015f a\u00e7\u0131m\u0131z\u0131n daha ba\u015far\u0131l\u0131 oldu\u011funu s\u00f6yleyebiliriz.  \u00d6rnek  A\u015fa\u011f\u0131daki \u00f6rnek  deneme.com  \u00fczerinde ssh ile eri\u015filebilen merkezi bir depodan lokal kopya olu\u015fturmak i\u00e7in verilebilir;  git clone ssh://ahmet@deneme.com/proje/deposunun/yolu/proje-dizini.git \ncd proje-dizini\n# Proje \u00fczerinde \u00e7al\u0131\u015fmaya ba\u015fla  \u0130lk sat\u0131rdaki komut bulundu\u011fumuz dizinde yeni bir  proje-dizini  olu\u015fturur ve merkez deponun i\u00e7eri\u011fini olu\u015fturulan bu dizine kopyalar. Daha sonra proje klas\u00f6r\u00fcn\u00fcn i\u00e7ine girebilir dosyalar \u00fczerinde de\u011fi\u015fikliklere ba\u015flayabilir, yap\u0131lan de\u011fi\u015fiklikleri merkezi depoya ya da di\u011fer depolara g\u00f6nderebilirsiniz. Ayr\u0131ca  .git  uzant\u0131s\u0131 klonlanm\u0131\u015f depo i\u00e7in g\u00f6z ard\u0131 edilecektir. B\u00f6ylece klonlanm\u0131\u015f yeni lokal depomuz yal\u0131n olmayan (non-bare) bir depo olacakt\u0131r.", 
            "title": "git clone"
        }, 
        {
            "location": "/baslangic/depo-olusturalim/#git-config", 
            "text": "Bu komut ile bilgisayar\u0131n\u0131zdaki Git program\u0131n\u0131 ya da her bir projeyi kendi i\u00e7inde konfig\u00fcre edebilirsiniz. Bu komut ile kullan\u0131c\u0131ya ait bilgilerden tutunda bir deponun nas\u0131l davranaca\u011f\u0131na kadar her\u015feyi konfig\u00fcre etmenizi sa\u011flar. Genel olarak kullan\u0131lan konfig\u00fcrasyon se\u00e7enekleri a\u015fa\u011f\u0131da listelenmi\u015ftir.  Kullan\u0131m\u0131  git config user.name  kullaniciadi   Bu komut ile aktif depo \u00fczerinde geli\u015ftirme yapan geli\u015ftiricinin ad\u0131 tan\u0131mlanm\u0131\u015f olur. Genel olarak  --global  i\u015fareti ile birlikte kullan\u0131lmaktad\u0131r.  git config --global user.name  kullaniciadi   Bu \u015fekilde kullan\u0131ld\u0131\u011f\u0131nda sistemi kullanan kullan\u0131c\u0131n\u0131n yapaca\u011f\u0131 t\u00fcm commitlerde kullan\u0131lacak isim bilgisi kaydedilmi\u015f olacakt\u0131r.  git config --global user.email  mailadresi   Kullan\u0131c\u0131n\u0131n yapaca\u011f\u0131 commitlerde kullan\u0131lmak \u00fczere kullan\u0131c\u0131ya ait mail adresini genel olarak ayarlak i\u00e7in kullan\u0131l\u0131r.  git config --global alias. takma-isim   git-komutu   Bir Git komutu i\u00e7in takma isim olu\u015fturur. B\u00f6ylece ayn\u0131 i\u015fi yapan bir komut farkl\u0131 bir isim ile kullan\u0131labilir.  git config --system core.editor  metin-etit\u00f6r\u00fc   Git komutlar\u0131 i\u00e7in kullan\u0131lacak varsay\u0131lan metin edit\u00f6r\u00fcn\u00fc ayarlamak i\u00e7in kullan\u0131l\u0131r. \u00d6r: geany  git config --global --edit  Bu komut ile varsay\u0131lan metin edit\u00f6r\u00fc kullan\u0131larak global konfig\u00fcrasyon dosyas\u0131 d\u00fczenlenmek \u00fczere a\u00e7\u0131l\u0131r.  Tart\u0131\u015fma  T\u00fcm konfig\u00fcrasyon se\u00e7enekleri d\u00fcz metin dosyalar\u0131nda saklan\u0131r. Bu ayarlar\u0131 de\u011fi\u015ftirmek i\u00e7in  git config  komutu, komut sat\u0131r\u0131nda kullan\u0131lmaya uygundur. Genel olarak ilk Git kurulumunda  --global  olarak bir \u00e7ok ayar yap\u0131lmakta ve proje geli\u015ftirme a\u015famas\u0131na ge\u00e7ilmektedir.  Git konfig\u00fcrasyon se\u00e7eneklerini 3 farkl\u0131 dosya da saklar. Bunlar, depo, kullan\u0131c\u0131 ve sistem \u015feklindedir.   depo /.git/config  - Depo bazl\u0131 ayarlar.  ~/.gitconfig  Kullan\u0131c\u0131 bazl\u0131 ayarlar.  --global  i\u015fareti ile ayarlanan konfig\u00fcrasyon se\u00e7enekleri bu dosya da saklan\u0131r.  $(prefix)/etc/gitconfig  - Sistem genelinde kullan\u0131lan ayarlar.   Bu dosyalardaki ayn\u0131 ayar yer al\u0131rsa \u00f6ncelik depo, sonra kullan\u0131c\u0131 ve sonra da sistem'dir. Bu dosyalardan herhangi birini a\u00e7t\u0131\u011f\u0131n\u0131zda a\u015fa\u011f\u0131dakine benzer bir i\u00e7erik g\u00f6r\u00fcnecektir.  [user] \n    name = Ahmet Hamdi\n    email = ahmet@deneme.com\n[alias]\n    st = status\n    co = checkout\n    br = branch\n    up = rebase\n    ci = commit\n[core]\n    editor = geany\n    excludesfile = /home/ahmethamdi/.gitignore_global   Bu bilgileri de\u011fi\u015ftirdi\u011finizde de  git config  ile ayn\u0131 etki g\u00f6r\u00fclecektir.  \u00d6rnek  Git'i kurduktan sonra ilk i\u015f olarak ad\u0131n\u0131z\u0131 ve mail adresinizi ayarlamak ve baz\u0131 varsay\u0131lan ayarlar\u0131 de\u011fi\u015ftirmek olacakt\u0131r. Yap\u0131lan ayarlar genel olarak a\u015fa\u011f\u0131dakiler benzer \u015feyler olacakt\u0131r.  # Git bizi nas\u0131l tan\u0131s\u0131n istersiniz\ngit config --global user.name  Ahmet Hamdi \ngit config --global user.email ahmet@deneme.com  # Favori metin edit\u00f6r\u00fcn\u00fc ayarlayal\u0131m\ngit config --global core.editor geany  # SVN benzeri baz\u0131 komut alsyaslar\u0131 olu\u015ftural\u0131m\ngit config --global alias.st status\ngit config --global alias.co checkout\ngit config --global alias.br branch\ngit config --global alias.up rebase\ngit config --global alias.ci commit  Bu komutlar ile yap\u0131lan de\u011fi\u015fiklikler  ~/.gitconfig  dosyas\u0131na yans\u0131yacakt\u0131r.", 
            "title": "git config"
        }, 
        {
            "location": "/baslangic/degisiklikleri-kaydedelim/", 
            "text": "De\u011fi\u015fiklikleri Kaydedelim\n\n\n\n\ngit add\n\n\nBu komut depodaki bir de\u011fi\u015fikli\u011fi Ge\u00e7i\u015f B\u00f6lgesi'ne (Staging Area) ekler. Bir sonraki commit'de hangi dosyalarda de\u011fi\u015fiklikler oldu\u011funu belirtir. Bununla beraber \ngit add\n komutunun depo \u00fczerinde bir etkisi olmaz. Yap\u0131lan de\u011fi\u015fiklikler depo i\u00e7ine ancak \ngit commit\n komutu ile dahil edilebilir. Bu nedenle \ngit add\n komutu ile eklenen dosyalar Ge\u00e7i\u015f B\u00f6lgesi'ne al\u0131n\u0131r.\n\n\nBu komutlar ile birlikte \ngit status\n komutu da kullan\u0131lmaktad\u0131r. Bu komut ile de \u00e7al\u0131\u015ft\u0131\u011f\u0131m\u0131z deponun ve Ge\u00e7i\u015f B\u00f6lgesi'nin genel durumuna bak\u0131labilir.\n\n\nKullan\u0131m\u0131\n\n\ngit add \ndosya\n\n\n\n\n\nBir sonraki committe kaydedilmek \u00fczere \ndosya\n i\u00e7indeki de\u011fi\u015fiklikleri Ge\u00e7i\u015f B\u00f6lgesi'ne ekler.\n\n\ngit add \ndizin\n\n\n\n\n\nBir sonraki committe kaydedilmek \u00fczere \ndizin\n i\u00e7indeki de\u011fi\u015fiklikleri Ge\u00e7i\u015f B\u00f6lgesi'ne ekler.\n\n\ngit add -p\n\n\n\n\nBu komut ile interaktif olarak Ge\u00e7ici B\u00f6lge s\u00fcreci ba\u015flat\u0131l\u0131r. \u00dczerinde de\u011fi\u015fiklik yap\u0131lm\u0131\u015f dosyalar i\u00e7in ne yapmak istedi\u011finizi sorar. Cevap olarak;\n\n\n\n\ny\n - Ge\u00e7i\u015f B\u00f6lgesi'ne g\u00f6ndermek i\u00e7in \n\n\nn\n - G\u00f6zard\u0131 etmek i\u00e7in\n\n\nq\n - G\u00f6zard\u0131 et ve kalan de\u011fi\u015fiklikler i\u00e7in i\u015flem yapmadan s\u00fcreci bitir.\n\n\na\n - Ge\u00e7i\u015f B\u00f6lgesi'ne g\u00f6nder ve kalan de\u011fi\u015fiklikler i\u00e7in de ayn\u0131s\u0131n\u0131 yap.\n\n\nd\n - Dosya bazl\u0131 olarak mevcut de\u011fi\u015fikli\u011fi kalan de\u011fi\u015fiklikleri g\u00f6zard\u0131 et.\n\n\n\n\nTart\u0131\u015fma\n\n\ngit add\n ve \ngit commit\n komutlar\u0131 Git i\u015f ak\u0131\u015f\u0131n\u0131n temellerini olu\u015fturmaktad\u0131r. Bu iki komut Git'i kullanmak isteyen herkes taraf\u0131ndan, ekip ya da bireysel olsun, iyi anla\u015f\u0131lmas\u0131 gerekir. Bu komutlar\u0131n yapt\u0131\u011f\u0131 i\u015f k\u0131saca depo i\u00e7in versiyon ge\u00e7mi\u015flerini olu\u015fturmak ve bunlar\u0131 kay\u0131t alt\u0131na almakt\u0131r.\n\n\nBir proje \u00fczerinde \u00e7al\u0131\u015fmak genel olarak d\u00fczenle/ge\u00e7i\u015f b\u00f6lgesine g\u00f6nder/commit yap \u015feklindedir. \u00d6ncelikle \u00fczerinde de\u011fi\u015fiklik yap\u0131lmas\u0131 gereken dosyalar \u00fczerinde gerekli de\u011fi\u015fiklikler yap\u0131l\u0131r. Yap\u0131lacak de\u011fi\u015fiklikler tamamland\u0131ysa yap\u0131lan de\u011fi\u015fiklikler \ngit add\n komutu ile Ge\u00e7i\u015f B\u00f6lgesi'ne g\u00f6nderilir. Daha sonra Ge\u00e7i\u015f B\u00f6lgesi'ndeki mevcut durumdan memnunsan\u0131z, yani herhangi bir aksakl\u0131k ya da eksiklik yoksa proje \u00fczerinde yap\u0131lan de\u011fi\u015fiklikleri proje ge\u00e7mi\u015fine yaz\u0131lmak \u00fczere \ngit commit\n komutu kullan\u0131l\u0131r.\n\n\n\n\ngit add\n komutu SVN'deki dosyay\u0131 depoya eklemeye yarayan \nsvn add\n komutu ile kar\u0131\u015ft\u0131r\u0131lmamal\u0131d\u0131r. Git'de \ngit add\n komutu ara bir katmanda daha soyut bir \u015fekilde \u00e7al\u0131\u015f\u0131r. Yani bir dosya \u00fczerinde her yapt\u0131\u011f\u0131n\u0131z de\u011fi\u015fikli\u011fi \ngit add\n komutunun \u00e7al\u0131\u015ft\u0131r\u0131lmas\u0131 gerekir. Bu i\u015flemin her defas\u0131nda yap\u0131lmas\u0131 gereksiz gibi g\u00f6r\u00fcnebilir. Fakat bu \u015fekilde \u00e7al\u0131\u015fmak \u00fczerinde \u00e7al\u0131\u015f\u0131lan projenin daha organize bir \u015fekilde geli\u015ftirilmesini sa\u011flar.\n\n\nGe\u00e7i\u015f B\u00f6lgesi (The Staging Area)\n\n\nGe\u00e7i\u015f B\u00f6lgesi Git'in di\u011fer sistemlere nazaran benzersiz \u00f6zelliklerinden  birisidir. \u00d6zellikle SVN'den ya da Mercurial'dan gelen kullan\u0131c\u0131lar i\u00e7in bu \u00f6zelli\u011fi anlamak biraz zaman alabilir. Daha basit ifade etmek gerekirse, Ge\u00e7i\u015f B\u00f6lgesi, proje ge\u00e7mi\u015fi ile \u00e7al\u0131\u015fma dizini aras\u0131nda tampon bir b\u00f6lgedir.\n\n\nYap\u0131lan her de\u011fi\u015fikli\u011fi do\u011frudan commitlemek yerine Ge\u00e7i\u015f B\u00f6lgesi'ni kullanmak bir biri ile ili\u015fkili ve anlaml\u0131 de\u011fi\u015fiklikleri gruplamam\u0131z\u0131 sa\u011flar. Daha sonra topluca yapt\u0131\u011f\u0131m\u0131z bu de\u011fi\u015fiklikler commit edilir ve proje ge\u00e7mi\u015fine dahil edilir. B\u00f6ylece bir projede bir birinden ba\u011f\u0131ms\u0131z dosyalar \u00fczerinde yap\u0131lan de\u011fi\u015fiklikler daha sonra bir biri ile ili\u015fkili ve mant\u0131kl\u0131 gruplar halinde commitlenir. Sadece Git'de de\u011fil, t\u00fcm versiyon kontrol sistemlerinde commitlerin atomik olmas\u0131 ve geri d\u00f6n\u00fc\u015fleri kolayca yapabilmeyi sa\u011flamal\u0131d\u0131r. Bunun yan\u0131nda yap\u0131lan hatalar\u0131 ve ortaya \u00e7\u0131kabilecek buglar\u0131 da temizlemek projenin geneline dokunmadan daha kolayca yap\u0131lacakt\u0131r.\n\n\n\u00d6rnek\n\n\nYeni bir projeye ba\u015flarken \ngit add\n komutu SVN'deki \nsvn import\n komutu ile ayn\u0131 anlama gelir. Bulundu\u011fumuz dizinde ilk commit'i g\u00f6ndermek i\u00e7in a\u015fa\u011f\u0131daki komutlar kullan\u0131labilir.\n\n\ngit add .\ngit commit\n\n\n\n\nProje \u00fczerinde \u00e7al\u0131\u015fmaya ba\u015flad\u0131\u011f\u0131n\u0131zda a\u015fa\u011f\u0131daki komutlarla yeni dosyalar ekleyebilirsiniz.\n\n\ngit add merhaba.txt\ngit commit\n\n\n\n\nYukar\u0131daki komut ayn\u0131 zamanda mevcut dosya de\u011fi\u015fkliklerinde de kullan\u0131labilir. Git a\u00e7\u0131s\u0131ndan bak\u0131ld\u0131\u011f\u0131nda bir dosyan\u0131n hen\u00fcz yeni olmas\u0131 ya da \u00fczerinde de\u011fi\u015fiklikler yap\u0131lan eski bir dosya olmas\u0131 \u00f6nemli de\u011fildir. Her hal\u00fckarda yap\u0131lan de\u011fi\u015fiklikler \u00f6ncelikle Ge\u00e7i\u015f B\u00f6lgesi'ne al\u0131n\u0131r ve daha sonra commitlenir.\n\n\ngit commit\n\n\nBu komut ile Ge\u00e7i\u015f B\u00f6lgesi'nde yer alan de\u011fi\u015fiklikler proje ge\u00e7mi\u015fine eklenir ve Ge\u00e7i\u015f B\u00f6lgesi temizlenir. Commitlenmi\u015f de\u011fi\u015fiklikler bir projenin g\u00fcvenli bir kopyas\u0131 anlam\u0131ndad\u0131r. Git commitlenen bu de\u011fi\u015fiklikleri \u00f6zellikle m\u00fcdahale edilmedi\u011fi m\u00fcddet\u00e7e de\u011fi\u015ftirmeyecektir. Bu komut \ngit add\n komutu ile birlikte en \u00f6nemli Git komutlar\u0131ndand\u0131r.\n\n\nAyn\u0131 isimde olsa da bu komut \nsvn commit\n komutundan farkl\u0131d\u0131r. Git'de yap\u0131lan de\u011fi\u015fiklikler lokal depoya commitlenir ve di\u011fer depolar ile bir etkile\u015fimde bulunmaz.\n\n\nKullan\u0131m\u0131\n\n\ngit commit\n\n\n\n\nGe\u00e7i\u015f b\u00f6lgesini commit etmek i\u00e7in kullan\u0131l\u0131r. Bu komut kullan\u0131ld\u0131\u011f\u0131nda commit mesaj\u0131n\u0131n girilmesi i\u00e7in bir metin edit\u00f6r\u00fc a\u00e7\u0131l\u0131r ve sizden commit ile ilgili bir mesaj girmeniz beklenir. Mesaj girildikten sonra dosyay\u0131 kaydedip \u00e7\u0131k\u0131\u015f yapt\u0131\u011f\u0131n\u0131zda a\u015fa\u011f\u0131daki komutun i\u015flevi yap\u0131lm\u0131\u015f olur.\n\n\ngit commit -m \nmesaj\n\n\n\n\n\nE\u011fer isterseniz metin edit\u00f6r\u00fc a\u00e7madan do\u011frudan komut sat\u0131r\u0131na yukar\u0131daki \nmesaj\n alan\u0131na yap\u0131lan de\u011fi\u015fiklikler ile alakal\u0131 bir a\u00e7\u0131klama girilerek Ge\u00e7i\u015f B\u00f6lgesi'ndeki de\u011fi\u015fiklikler proje ge\u00e7mi\u015fne commit edilmi\u015f olur.\n\n\ngit commit -a\n\n\n\n\nBu komut ile \u00e7al\u0131\u015f\u0131lan projenin de\u011fi\u015fen dosyalar\u0131 commit edilir. \u00dczerinde de\u011fi\u015fiklik yap\u0131lm\u0131\u015f dosyalar daha \u00f6nceden commitlenmi\u015f ve ge\u00e7mi\u015f kayd\u0131 bulunan dosyalard\u0131r.\n\n\nTart\u0131\u015fma\n\n\nGe\u00e7i\u015f B\u00f6lgesi'ne al\u0131nan de\u011fi\u015fiklikler her zaman lokaldeki depoya commitlenir. Bu \u00f6zelli\u011fi ile SVN'den ayr\u0131lmaktad\u0131r. SVN'de commitler merkezi depoya g\u00f6nderilir. Git ise sizi merkezi bir depo ile \u00e7al\u0131\u015fmaya zorlamaz. Ne zaman istereniz lokalde yapm\u0131\u015f oldu\u011funuz de\u011fi\u015fiklikleri merkezi depoya g\u00f6nderebilirsiniz. Ge\u00e7i\u015f B\u00f6lgesi \u00e7al\u0131\u015f\u0131lan dizin ile proje ge\u00e7mi\u015fi aras\u0131nda tampon b\u00f6lge olarak d\u00fc\u015f\u00fcn\u00fclece\u011fi gibi her bir geli\u015ftiricinin lokal deposu da yapt\u0131klar\u0131 de\u011fi\u015fiklikler ile merkezi depo aras\u0131nda tampon bir b\u00f6lgedir.\n\n\nBu \u00f6zellik Git kullanan geli\u015ftiricilerin \u00e7al\u0131\u015fma \u015fekillerini de\u011fi\u015ftirmi\u015ftir. Yap\u0131lan bir de\u011fi\u015fikli\u011fi merkezi bir depoaya s\u00fcrekli commitlemek yerine yap\u0131lan de\u011fi\u015fiklikler commitler arac\u0131l\u0131\u011f\u0131 ile lokal depoda biriktirilir. Daha sonra belli aral\u0131klarda merkezi depoya yap\u0131lan de\u011fi\u015fiklikler topluca g\u00f6nderilir. Bu \u00e7al\u0131\u015fma mant\u0131\u011f\u0131 SVN'in \u00e7al\u0131\u015fma mant\u0131\u011f\u0131ndan daha avantajl\u0131d\u0131r. Yap\u0131lacak belirlenmi\u015f bir revizyon atomik commitler ile tamamlanabilir. Bu \u015fekilde benzer i\u015fleri yapmak i\u00e7in yap\u0131lan commitler gruplar halinde y\u00f6netilebilir olacakt\u0131r. Bu ayr\u0131ca geli\u015ftiricilerin izole bir ortamda geli\u015ftirme yapabilmelerini de sa\u011flar. Yap\u0131lmas\u0131 gereken i\u015fler ve de\u011fi\u015fiklikler tamamland\u0131ktan sonra yap\u0131lan \u00e7al\u0131\u015fmalar merkeze g\u00f6nderilir.", 
            "title": "De\u011fi\u015fiklikleri Kaydedelim"
        }, 
        {
            "location": "/baslangic/degisiklikleri-kaydedelim/#degisiklikleri-kaydedelim", 
            "text": "", 
            "title": "De\u011fi\u015fiklikleri Kaydedelim"
        }, 
        {
            "location": "/baslangic/degisiklikleri-kaydedelim/#git-add", 
            "text": "Bu komut depodaki bir de\u011fi\u015fikli\u011fi Ge\u00e7i\u015f B\u00f6lgesi'ne (Staging Area) ekler. Bir sonraki commit'de hangi dosyalarda de\u011fi\u015fiklikler oldu\u011funu belirtir. Bununla beraber  git add  komutunun depo \u00fczerinde bir etkisi olmaz. Yap\u0131lan de\u011fi\u015fiklikler depo i\u00e7ine ancak  git commit  komutu ile dahil edilebilir. Bu nedenle  git add  komutu ile eklenen dosyalar Ge\u00e7i\u015f B\u00f6lgesi'ne al\u0131n\u0131r.  Bu komutlar ile birlikte  git status  komutu da kullan\u0131lmaktad\u0131r. Bu komut ile de \u00e7al\u0131\u015ft\u0131\u011f\u0131m\u0131z deponun ve Ge\u00e7i\u015f B\u00f6lgesi'nin genel durumuna bak\u0131labilir.  Kullan\u0131m\u0131  git add  dosya   Bir sonraki committe kaydedilmek \u00fczere  dosya  i\u00e7indeki de\u011fi\u015fiklikleri Ge\u00e7i\u015f B\u00f6lgesi'ne ekler.  git add  dizin   Bir sonraki committe kaydedilmek \u00fczere  dizin  i\u00e7indeki de\u011fi\u015fiklikleri Ge\u00e7i\u015f B\u00f6lgesi'ne ekler.  git add -p  Bu komut ile interaktif olarak Ge\u00e7ici B\u00f6lge s\u00fcreci ba\u015flat\u0131l\u0131r. \u00dczerinde de\u011fi\u015fiklik yap\u0131lm\u0131\u015f dosyalar i\u00e7in ne yapmak istedi\u011finizi sorar. Cevap olarak;   y  - Ge\u00e7i\u015f B\u00f6lgesi'ne g\u00f6ndermek i\u00e7in   n  - G\u00f6zard\u0131 etmek i\u00e7in  q  - G\u00f6zard\u0131 et ve kalan de\u011fi\u015fiklikler i\u00e7in i\u015flem yapmadan s\u00fcreci bitir.  a  - Ge\u00e7i\u015f B\u00f6lgesi'ne g\u00f6nder ve kalan de\u011fi\u015fiklikler i\u00e7in de ayn\u0131s\u0131n\u0131 yap.  d  - Dosya bazl\u0131 olarak mevcut de\u011fi\u015fikli\u011fi kalan de\u011fi\u015fiklikleri g\u00f6zard\u0131 et.   Tart\u0131\u015fma  git add  ve  git commit  komutlar\u0131 Git i\u015f ak\u0131\u015f\u0131n\u0131n temellerini olu\u015fturmaktad\u0131r. Bu iki komut Git'i kullanmak isteyen herkes taraf\u0131ndan, ekip ya da bireysel olsun, iyi anla\u015f\u0131lmas\u0131 gerekir. Bu komutlar\u0131n yapt\u0131\u011f\u0131 i\u015f k\u0131saca depo i\u00e7in versiyon ge\u00e7mi\u015flerini olu\u015fturmak ve bunlar\u0131 kay\u0131t alt\u0131na almakt\u0131r.  Bir proje \u00fczerinde \u00e7al\u0131\u015fmak genel olarak d\u00fczenle/ge\u00e7i\u015f b\u00f6lgesine g\u00f6nder/commit yap \u015feklindedir. \u00d6ncelikle \u00fczerinde de\u011fi\u015fiklik yap\u0131lmas\u0131 gereken dosyalar \u00fczerinde gerekli de\u011fi\u015fiklikler yap\u0131l\u0131r. Yap\u0131lacak de\u011fi\u015fiklikler tamamland\u0131ysa yap\u0131lan de\u011fi\u015fiklikler  git add  komutu ile Ge\u00e7i\u015f B\u00f6lgesi'ne g\u00f6nderilir. Daha sonra Ge\u00e7i\u015f B\u00f6lgesi'ndeki mevcut durumdan memnunsan\u0131z, yani herhangi bir aksakl\u0131k ya da eksiklik yoksa proje \u00fczerinde yap\u0131lan de\u011fi\u015fiklikleri proje ge\u00e7mi\u015fine yaz\u0131lmak \u00fczere  git commit  komutu kullan\u0131l\u0131r.   git add  komutu SVN'deki dosyay\u0131 depoya eklemeye yarayan  svn add  komutu ile kar\u0131\u015ft\u0131r\u0131lmamal\u0131d\u0131r. Git'de  git add  komutu ara bir katmanda daha soyut bir \u015fekilde \u00e7al\u0131\u015f\u0131r. Yani bir dosya \u00fczerinde her yapt\u0131\u011f\u0131n\u0131z de\u011fi\u015fikli\u011fi  git add  komutunun \u00e7al\u0131\u015ft\u0131r\u0131lmas\u0131 gerekir. Bu i\u015flemin her defas\u0131nda yap\u0131lmas\u0131 gereksiz gibi g\u00f6r\u00fcnebilir. Fakat bu \u015fekilde \u00e7al\u0131\u015fmak \u00fczerinde \u00e7al\u0131\u015f\u0131lan projenin daha organize bir \u015fekilde geli\u015ftirilmesini sa\u011flar.  Ge\u00e7i\u015f B\u00f6lgesi (The Staging Area)  Ge\u00e7i\u015f B\u00f6lgesi Git'in di\u011fer sistemlere nazaran benzersiz \u00f6zelliklerinden  birisidir. \u00d6zellikle SVN'den ya da Mercurial'dan gelen kullan\u0131c\u0131lar i\u00e7in bu \u00f6zelli\u011fi anlamak biraz zaman alabilir. Daha basit ifade etmek gerekirse, Ge\u00e7i\u015f B\u00f6lgesi, proje ge\u00e7mi\u015fi ile \u00e7al\u0131\u015fma dizini aras\u0131nda tampon bir b\u00f6lgedir.  Yap\u0131lan her de\u011fi\u015fikli\u011fi do\u011frudan commitlemek yerine Ge\u00e7i\u015f B\u00f6lgesi'ni kullanmak bir biri ile ili\u015fkili ve anlaml\u0131 de\u011fi\u015fiklikleri gruplamam\u0131z\u0131 sa\u011flar. Daha sonra topluca yapt\u0131\u011f\u0131m\u0131z bu de\u011fi\u015fiklikler commit edilir ve proje ge\u00e7mi\u015fine dahil edilir. B\u00f6ylece bir projede bir birinden ba\u011f\u0131ms\u0131z dosyalar \u00fczerinde yap\u0131lan de\u011fi\u015fiklikler daha sonra bir biri ile ili\u015fkili ve mant\u0131kl\u0131 gruplar halinde commitlenir. Sadece Git'de de\u011fil, t\u00fcm versiyon kontrol sistemlerinde commitlerin atomik olmas\u0131 ve geri d\u00f6n\u00fc\u015fleri kolayca yapabilmeyi sa\u011flamal\u0131d\u0131r. Bunun yan\u0131nda yap\u0131lan hatalar\u0131 ve ortaya \u00e7\u0131kabilecek buglar\u0131 da temizlemek projenin geneline dokunmadan daha kolayca yap\u0131lacakt\u0131r.  \u00d6rnek  Yeni bir projeye ba\u015flarken  git add  komutu SVN'deki  svn import  komutu ile ayn\u0131 anlama gelir. Bulundu\u011fumuz dizinde ilk commit'i g\u00f6ndermek i\u00e7in a\u015fa\u011f\u0131daki komutlar kullan\u0131labilir.  git add .\ngit commit  Proje \u00fczerinde \u00e7al\u0131\u015fmaya ba\u015flad\u0131\u011f\u0131n\u0131zda a\u015fa\u011f\u0131daki komutlarla yeni dosyalar ekleyebilirsiniz.  git add merhaba.txt\ngit commit  Yukar\u0131daki komut ayn\u0131 zamanda mevcut dosya de\u011fi\u015fkliklerinde de kullan\u0131labilir. Git a\u00e7\u0131s\u0131ndan bak\u0131ld\u0131\u011f\u0131nda bir dosyan\u0131n hen\u00fcz yeni olmas\u0131 ya da \u00fczerinde de\u011fi\u015fiklikler yap\u0131lan eski bir dosya olmas\u0131 \u00f6nemli de\u011fildir. Her hal\u00fckarda yap\u0131lan de\u011fi\u015fiklikler \u00f6ncelikle Ge\u00e7i\u015f B\u00f6lgesi'ne al\u0131n\u0131r ve daha sonra commitlenir.", 
            "title": "git add"
        }, 
        {
            "location": "/baslangic/degisiklikleri-kaydedelim/#git-commit", 
            "text": "Bu komut ile Ge\u00e7i\u015f B\u00f6lgesi'nde yer alan de\u011fi\u015fiklikler proje ge\u00e7mi\u015fine eklenir ve Ge\u00e7i\u015f B\u00f6lgesi temizlenir. Commitlenmi\u015f de\u011fi\u015fiklikler bir projenin g\u00fcvenli bir kopyas\u0131 anlam\u0131ndad\u0131r. Git commitlenen bu de\u011fi\u015fiklikleri \u00f6zellikle m\u00fcdahale edilmedi\u011fi m\u00fcddet\u00e7e de\u011fi\u015ftirmeyecektir. Bu komut  git add  komutu ile birlikte en \u00f6nemli Git komutlar\u0131ndand\u0131r.  Ayn\u0131 isimde olsa da bu komut  svn commit  komutundan farkl\u0131d\u0131r. Git'de yap\u0131lan de\u011fi\u015fiklikler lokal depoya commitlenir ve di\u011fer depolar ile bir etkile\u015fimde bulunmaz.  Kullan\u0131m\u0131  git commit  Ge\u00e7i\u015f b\u00f6lgesini commit etmek i\u00e7in kullan\u0131l\u0131r. Bu komut kullan\u0131ld\u0131\u011f\u0131nda commit mesaj\u0131n\u0131n girilmesi i\u00e7in bir metin edit\u00f6r\u00fc a\u00e7\u0131l\u0131r ve sizden commit ile ilgili bir mesaj girmeniz beklenir. Mesaj girildikten sonra dosyay\u0131 kaydedip \u00e7\u0131k\u0131\u015f yapt\u0131\u011f\u0131n\u0131zda a\u015fa\u011f\u0131daki komutun i\u015flevi yap\u0131lm\u0131\u015f olur.  git commit -m  mesaj   E\u011fer isterseniz metin edit\u00f6r\u00fc a\u00e7madan do\u011frudan komut sat\u0131r\u0131na yukar\u0131daki  mesaj  alan\u0131na yap\u0131lan de\u011fi\u015fiklikler ile alakal\u0131 bir a\u00e7\u0131klama girilerek Ge\u00e7i\u015f B\u00f6lgesi'ndeki de\u011fi\u015fiklikler proje ge\u00e7mi\u015fne commit edilmi\u015f olur.  git commit -a  Bu komut ile \u00e7al\u0131\u015f\u0131lan projenin de\u011fi\u015fen dosyalar\u0131 commit edilir. \u00dczerinde de\u011fi\u015fiklik yap\u0131lm\u0131\u015f dosyalar daha \u00f6nceden commitlenmi\u015f ve ge\u00e7mi\u015f kayd\u0131 bulunan dosyalard\u0131r.  Tart\u0131\u015fma  Ge\u00e7i\u015f B\u00f6lgesi'ne al\u0131nan de\u011fi\u015fiklikler her zaman lokaldeki depoya commitlenir. Bu \u00f6zelli\u011fi ile SVN'den ayr\u0131lmaktad\u0131r. SVN'de commitler merkezi depoya g\u00f6nderilir. Git ise sizi merkezi bir depo ile \u00e7al\u0131\u015fmaya zorlamaz. Ne zaman istereniz lokalde yapm\u0131\u015f oldu\u011funuz de\u011fi\u015fiklikleri merkezi depoya g\u00f6nderebilirsiniz. Ge\u00e7i\u015f B\u00f6lgesi \u00e7al\u0131\u015f\u0131lan dizin ile proje ge\u00e7mi\u015fi aras\u0131nda tampon b\u00f6lge olarak d\u00fc\u015f\u00fcn\u00fclece\u011fi gibi her bir geli\u015ftiricinin lokal deposu da yapt\u0131klar\u0131 de\u011fi\u015fiklikler ile merkezi depo aras\u0131nda tampon bir b\u00f6lgedir.  Bu \u00f6zellik Git kullanan geli\u015ftiricilerin \u00e7al\u0131\u015fma \u015fekillerini de\u011fi\u015ftirmi\u015ftir. Yap\u0131lan bir de\u011fi\u015fikli\u011fi merkezi bir depoaya s\u00fcrekli commitlemek yerine yap\u0131lan de\u011fi\u015fiklikler commitler arac\u0131l\u0131\u011f\u0131 ile lokal depoda biriktirilir. Daha sonra belli aral\u0131klarda merkezi depoya yap\u0131lan de\u011fi\u015fiklikler topluca g\u00f6nderilir. Bu \u00e7al\u0131\u015fma mant\u0131\u011f\u0131 SVN'in \u00e7al\u0131\u015fma mant\u0131\u011f\u0131ndan daha avantajl\u0131d\u0131r. Yap\u0131lacak belirlenmi\u015f bir revizyon atomik commitler ile tamamlanabilir. Bu \u015fekilde benzer i\u015fleri yapmak i\u00e7in yap\u0131lan commitler gruplar halinde y\u00f6netilebilir olacakt\u0131r. Bu ayr\u0131ca geli\u015ftiricilerin izole bir ortamda geli\u015ftirme yapabilmelerini de sa\u011flar. Yap\u0131lmas\u0131 gereken i\u015fler ve de\u011fi\u015fiklikler tamamland\u0131ktan sonra yap\u0131lan \u00e7al\u0131\u015fmalar merkeze g\u00f6nderilir.", 
            "title": "git commit"
        }
    ]
}